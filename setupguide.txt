🏗️ ZEDSON WATCHCRAFT - Directory Setup Guide
Developed by PULSEWARE❤️

📁 CURRENT PROJECT STRUCTURE (What you have now):
═══════════════════════════════════════════════════════════════════════════════════

Your existing project folder:
📁 zedson-watchcraft/  (or whatever you named it)
├── index.html
├── package.json
├── 📁 css/
│   ├── styles.css
│   └── login.css
├── 📁 js/
│   ├── utils.js
│   ├── auth.js
│   ├── inventory.js
│   ├── sales-core.js
│   ├── sales-extended.js
│   ├── service.js
│   ├── expenses.js
│   ├── customers.js
│   ├── invoice-templates.js
│   ├── invoices.js
│   ├── logging.js
│   ├── app-core.js
│   └── app-extended.js
└── 📁 assets/
    └── zedson-logo.png

═══════════════════════════════════════════════════════════════════════════════════

🎯 OPTION 1: CREATE BACKEND INSIDE EXISTING PROJECT (RECOMMENDED)
═══════════════════════════════════════════════════════════════════════════════════

📁 zedson-watchcraft/  (your existing folder)
├── index.html                     # ← Your existing frontend files
├── package.json                   # ← Your existing frontend package.json
├── 📁 css/                        # ← Your existing CSS
├── 📁 js/                         # ← Your existing JS (add mongodb-service.js here)
├── 📁 assets/                     # ← Your existing assets
└── 📁 backend/                    # ← NEW: Create this folder here
    ├── server.js                  # ← NEW: Backend server
    ├── package.json               # ← NEW: Backend dependencies
    ├── .env                       # ← NEW: Environment variables
    ├── .gitignore                 # ← NEW: Backend git ignore
    └── 📁 node_modules/           # ← NEW: Backend dependencies (after npm install)

COMMANDS FOR OPTION 1:
═══════════════════════════════════════════════════════════════════════════════════

# Navigate to your existing project folder
cd /path/to/your/zedson-watchcraft

# Create backend directory inside your project
mkdir backend
cd backend

# Create backend files
npm init -y
npm install express mongoose cors bcryptjs jsonwebtoken dotenv
npm install -D nodemon

# Create the files (server.js, .env, .gitignore) as provided above

═══════════════════════════════════════════════════════════════════════════════════

🎯 OPTION 2: SEPARATE FRONTEND AND BACKEND (ALTERNATIVE)
═══════════════════════════════════════════════════════════════════════════════════

📁 zedson-watchcraft-system/       # ← NEW: Main project folder
├── 📁 frontend/                   # ← Move your existing files here
│   ├── index.html
│   ├── package.json
│   ├── 📁 css/
│   ├── 📁 js/
│   └── 📁 assets/
└── 📁 backend/                    # ← NEW: Backend folder
    ├── server.js
    ├── package.json
    ├── .env
    └── .gitignore

COMMANDS FOR OPTION 2:
═══════════════════════════════════════════════════════════════════════════════════

# Create new main project folder
mkdir zedson-watchcraft-system
cd zedson-watchcraft-system

# Create frontend folder and move existing files
mkdir frontend
# Move all your existing files (index.html, css/, js/, assets/) to frontend/

# Create backend folder
mkdir backend
cd backend

# Set up backend
npm init -y
npm install express mongoose cors bcryptjs jsonwebtoken dotenv
npm install -D nodemon

═══════════════════════════════════════════════════════════════════════════════════

💡 RECOMMENDED APPROACH: OPTION 1
═══════════════════════════════════════════════════════════════════════════════════

I recommend OPTION 1 because:
✅ Keeps everything together in one project
✅ Easier to manage and deploy
✅ Simpler file structure
✅ Better for development

EXACT COMMANDS TO RUN:
═══════════════════════════════════════════════════════════════════════════════════

# 1. Navigate to your existing ZEDSON WATCHCRAFT project folder
cd /path/to/your/existing/zedson-watchcraft-folder

# 2. Create backend directory inside your project
mkdir backend

# 3. Navigate to backend directory
cd backend

# 4. Initialize Node.js project
npm init -y

# 5. Install required dependencies
npm install express mongoose cors bcryptjs jsonwebtoken dotenv nodemon

# 6. Create server.js file
touch server.js
# Copy the server.js content from my previous artifact

# 7. Create .env file
touch .env
# Copy the .env content from my previous artifact

# 8. Create .gitignore
echo "node_modules/
.env
*.log
.DS_Store" > .gitignore

# 9. Update package.json scripts
# Edit package.json and add the scripts from my previous artifact

# 10. Start backend server
npm run dev

═══════════════════════════════════════════════════════════════════════════════════

🔍 HOW TO FIND YOUR EXISTING PROJECT FOLDER:
═══════════════════════════════════════════════════════════════════════════════════

Your existing project is likely in one of these locations:

Windows:
📁 C:\Users\YourName\Desktop\zedson-watchcraft\
📁 C:\Users\YourName\Documents\zedson-watchcraft\
📁 C:\Projects\zedson-watchcraft\

Mac:
📁 /Users/YourName/Desktop/zedson-watchcraft/
📁 /Users/YourName/Documents/zedson-watchcraft/
📁 ~/Projects/zedson-watchcraft/

Linux:
📁 /home/YourName/Desktop/zedson-watchcraft/
📁 /home/YourName/Documents/zedson-watchcraft/
📁 ~/Projects/zedson-watchcraft/

FIND COMMAND:
# To find your project folder, search for index.html
find ~ -name "index.html" -path "*/zedson*" 2>/dev/null

═══════════════════════════════════════════════════════════════════════════════════

🚀 AFTER SETUP - YOUR FINAL STRUCTURE:
═══════════════════════════════════════════════════════════════════════════════════

📁 zedson-watchcraft/
├── index.html                     # ← Frontend entry point
├── package.json                   # ← Frontend dependencies  
├── 📁 css/
│   ├── styles.css                # ← UPDATE: Add footer styles
│   └── login.css
├── 📁 js/
│   ├── mongodb-service.js         # ← ADD: New MongoDB service
│   ├── utils.js
│   ├── auth.js
│   ├── inventory.js
│   ├── sales-core.js
│   ├── sales-extended.js
│   ├── service.js
│   ├── expenses.js
│   ├── customers.js
│   ├── invoice-templates.js
│   ├── invoices.js
│   ├── logging.js
│   ├── app-core.js
│   └── app-extended.js
├── 📁 assets/
│   └── zedson-logo.png
└── 📁 backend/                    # ← NEW: Backend API server
    ├── server.js                  # ← NEW: Express server
    ├── package.json               # ← NEW: Backend dependencies
    ├── .env                       # ← NEW: MongoDB config
    ├── .gitignore                 # ← NEW: Backend git ignore
    └── 📁 node_modules/           # ← NEW: Backend packages

HOW TO RUN BOTH:
# Terminal 1 (Backend):
cd your-project/backend
npm run dev

# Terminal 2 (Frontend):
cd your-project
# Open index.html in browser OR
python -m http.server 3000  # OR
npx live-server --port=3000

═══════════════════════════════════════════════════════════════════════════════════

📝 STEP-BY-STEP VISUAL GUIDE:
═══════════════════════════════════════════════════════════════════════════════════

1. 📂 Find your existing project folder (contains index.html)
2. 📂 Open terminal/command prompt in that folder
3. 📁 Create "backend" folder: mkdir backend
4. 📂 Navigate into backend: cd backend
5. 📦 Set up Node.js: npm init -y
6. 📦 Install packages: npm install express mongoose cors bcryptjs jsonwebtoken dotenv nodemon
7. 📄 Create server.js (copy from my artifact)
8. 📄 Create .env (copy from my artifact)
9. 📄 Create .gitignore
10. 🚀 Start backend: npm run dev
11. 🌐 Frontend: Open index.html in browser
12. ✅ Enjoy PULSEWARE❤️ powered ZEDSON WATCHCRAFT!

═══════════════════════════════════════════════════════════════════════════════════

💝 Need Help? Contact PULSEWARE Development Team!
📧 support@pulseware.dev
🔗 Developed with ❤️ by PULSEWARE

═══════════════════════════════════════════════════════════════════════════════════